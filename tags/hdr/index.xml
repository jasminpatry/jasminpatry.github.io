<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>glowybits</title>
    <link>http://www.glowybits.com/tags/hdr/index.xml</link>
    <description>Recent content on glowybits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jasmin Patry</copyright>
    <atom:link href="http://www.glowybits.com/tags/hdr/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>HDR Display Support in Infamous Second Son and Infamous First Light (Part 2)</title>
      <link>http://www.glowybits.com/blog/2017/01/04/ifl_iss_hdr_2/</link>
      <pubDate>Wed, 04 Jan 2017 07:39:39 -0800</pubDate>
      
      <guid>http://www.glowybits.com/blog/2017/01/04/ifl_iss_hdr_2/</guid>
      <description>

&lt;h1 id=&#34;welcome-back-and-happy-new-year&#34;&gt;Welcome Back! (And Happy New Year!)&lt;/h1&gt;

&lt;p&gt;This is the second post of a two-part series discussing the technical aspects of adding HDR support to Infamous Second
Son and Infamous First Light. If you haven&amp;rsquo;t read it already, &lt;a href=&#34;http://www.glowybits.com/blog/2016/12/21/ifl_iss_hdr_1/&#34;&gt;Part 1&lt;/a&gt; discusses our
HDR tonemapping and color grading solutions, as well as the HDR-friendly render target format we used to help improve
performance. In this post I&amp;rsquo;ll discuss how we matched the look of the SDR and HDR modes (in the darker parts of the
image), a couple more performance optimizations, as well as some issues we ran into when combining HDR and 4K on the PS4
Pro.&lt;/p&gt;

&lt;h1 id=&#34;matching-sdr-hdtv-output&#34;&gt;Matching SDR HDTV Output&lt;/h1&gt;

&lt;p&gt;When we started working with HDR, we realized fairly early on that taking a linear tonemapped image, encoding it with
PQ, and displaying it on an HDR TV resulted in a &amp;ldquo;washed-out&amp;rdquo;, unsaturated look compared to SDR mode, especially in
the darker parts of the image. Before I can explain why this occurs, we&amp;rsquo;ll need to take a detour into the land of SDR
OETFs and EOTFs.&lt;/p&gt;

&lt;h2 id=&#34;sdr-transfer-functions&#34;&gt;SDR Transfer Functions&lt;/h2&gt;

&lt;p&gt;Regular SDR HDTVs use an EOTF (electro-optical transfer function) that is governed by the &lt;a href=&#34;https://www.itu.int/dms_pubrec/itu-r/rec/bt/R-REC-BT.1886-0-201103-I!!PDF-E.pdf&#34;&gt;BT.1886&lt;/a&gt;
standard. It specifies a gamma of 2.4, while the &lt;a href=&#34;https://en.wikipedia.org/wiki/Rec._709&#34;&gt;Rec. 709&lt;/a&gt; standard, which describes the OETF (opto-electrical
transfer function) for HDTV signals, specifies a function with an average gamma of about 0.5. The product of these gamma
exponents (about 1.2) results in a non-identity &amp;ldquo;scene-to-screen&amp;rdquo; transfer function which has the effect of increasing
the image constrast, especially in the dark areas. (In practice there is a lot of variance in both the OETFs used to
produce content, and in the EOTFs implemented by displays. For more on this, see the sidebar below.)&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&#34;https://www.desmos.com/calculator/rbvn5ppsfo&#34;&gt;&lt;img src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/sts_srgb.png&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;h4&gt;Scene-to-screen transforms for a few different OETF/EOTF combinations, with both axes in sRGB space. (See the &lt;a href=&#34;https://www.desmos.com/calculator/rbvn5ppsfo&#34;&gt;Desmos version&lt;/a&gt; for linear and log-log plots.)&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&#34;fr&#34;&gt;
&lt;h4&gt;The Rec. 709 OETF: A Cautionary Tale&lt;/h4&gt;
&lt;p&gt;

At Sucker Punch, we&amp;rsquo;ve attempted to emulate the Rec. 709 OETF since Infamous 2, by using the console&#39;s video-out
hardware to apply a gamma curve to our sRGB output signal. However, the PS4 supports the automatic conversion of sRGB
signals to the exact Rec. 709 OETF, so we decided to switch to that for these patches &amp;mdash; following the standard
more precisely seemed like a good idea!

&lt;/p&gt;

&lt;p&gt;

The switch resulted in deeper blacks, which we thought looked good in the test scenes we examined on our TVs.
However, after we shipped the patches, we heard reports from some users about &amp;ldquo;crushed blacks,&amp;rdquo; so we decided to investigate.
It turned out that the TVs we were using for testing produced lighter blacks than the TVs some of our users were using. 
This, combined with the darker Rec. 709 OETF, resulted in much deeper blacks than we intended on some TVs. 

&lt;/p&gt;

&lt;p&gt;

While the Rec. 709 standard specifies a precise OETF, it admits (in a footnote) that in practice the OETF is adjusted to
achieve the desired output when viewed on a TV conforming to BT.1886. (Scott Miller from Dolby &lt;a
href=&#34;https://www.smpte.org/sites/default/files/2014-05-06-EOTF-Miller-1-2-handout.pdf&#34;&gt;claims&lt;/a&gt; that the actual Rec.
709 OETF is rarely used in practice &amp;mdash; at least in film and television.) As can be seen in the graph above, the Rec. 709
OETF significantly darkens dark colors when combined with the BT.1886 EOTF, so before adopting the Rec. 709 OETF, make
sure that this combination works well with your content. For our games, we ended up issuing a new patch with a contrast
option that allowed users to switch to the old (sRGB-based) OETF curve.

&lt;/p&gt;

&lt;/figure&gt;

&lt;p&gt;It is clear from the graph above that the combination of the Rec. 709 OETF and the BT.1886 EOTF significantly darkens
dark colors. Other OETF/EOTF combinations also have this result (though less pronounced) &amp;mdash; this even occurs when sRGB
colors are displayed with gamma 2.2, even though the average gamma of the sRGB OETF is &lt;span class=&#34;nobr&#34;&gt;1.0 /
2.2&lt;/span&gt;. The important thing to note is that for SDR displays in general, the OETF and EOTF are not inverses of each
other.&lt;/p&gt;

&lt;p&gt;You may be asking yourself &lt;em&gt;why&lt;/em&gt; it&amp;rsquo;s desirable to have a non-identity scene-to-screen transform. Shouldn&amp;rsquo;t we be aiming
to have the TV faithfully reproduce the relative luminance values of the scene we&amp;rsquo;re rendering? The answer that you find
in textbooks (e.g., Section 3.4 in &lt;em&gt;Principles of Digital Image Synthesis&lt;/em&gt; by Andrew Glassner, and &lt;a href=&#34;http://www.poynton.com/PDFs/TIDV/Gamma.pdf&#34;&gt;Chapter 6&lt;/a&gt; of &lt;em&gt;A
Technical Introduction to Digital Video&lt;/em&gt; by Charles Poynton) is that the increased contrast helps to compensate for the
dim surround conditions in which the display is typically viewed, which has the effect of reducing apparent contrast.
This argument seems less relevant for games, since they are typically authored in similar viewing conditions than those in which
they are played &amp;mdash; but it&amp;rsquo;s a reality of SDR displays that we need to be aware of.&lt;/p&gt;

&lt;h2 id=&#34;what-about-hdr&#34;&gt;What About HDR?&lt;/h2&gt;

&lt;p&gt;Thankfully, things are somewhat simpler for HDR displays: the PQ EOTF and OETF &lt;em&gt;are&lt;/em&gt; inverses of each other. However,
this means that if you want the darker portions of your HDR image to resemble the SDR image you&amp;rsquo;ve spent so much time
tweaking, then you need to apply the scene-to-screen transform yourself. Using the notation $f(x)$ for OETFs and $F(x)$
for EOTFs, we computed the final PQ value as follows:&lt;/p&gt;

&lt;div class=&#34;clearfix&#34;&gt;&lt;/div&gt;

&lt;div&gt;$$x_\mathrm{pq} = f_\mathrm{pq}\left(F_\mathrm{1886}\left(f_\mathrm{709}\left(x_\mathrm{linear}\right)\right)\right)$$&lt;/div&gt;

&lt;p&gt;We used this transform over the entire range of values, even those greater than 1.0. This increased the maximum
luminance of our signal (from 1000 nits to about 1400 nits), but we were very pleased with the results and so did not
attempt to treat values greater than 1.0 differently.&lt;/p&gt;

&lt;p&gt;To demonstrate the difference, I&amp;rsquo;ve simulated the effect of removing the scene-to-screen transform on a couple of SDR images
below (click the images to toggle between the versions with and without the scene-to-screen transform).&lt;/p&gt;

&lt;figure&gt;
&lt;img onclick=&#34;ImageFlip(this, &#39;/images/ifl_iss_hdr/nosts_fish_market.jpg&#39;)&#34; src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/sts_fish_market.jpg&#34;&gt;
&lt;img onclick=&#34;ImageFlip(this, &#39;/images/ifl_iss_hdr/nosts_space_needle.jpg&#39;)&#34; src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/sts_space_needle.jpg&#34;&gt;
&lt;figcaption&gt;
&lt;h4&gt;Scenes with and without the scene-to-screen transform applied. (Click the images to toggle.)&lt;/h4&gt; 
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;optimized-pq-and-srgb-conversions&#34;&gt;Optimized PQ and sRGB Conversions&lt;/h1&gt;

&lt;p&gt;The following optimizations, while minor, seem worth mentioning because they may have wide applicability and are simple
to implemement.&lt;/p&gt;

&lt;p&gt;We fit a curve to the PQ OETF which saves a few cycles, and the results are visually indistinguishable from the exact
function. The curve was optimized to be accurate between 0.01 nits (a reasonable value for a &amp;ldquo;just noticeable
difference&amp;rdquo; from black) and 1400 nits (the maximum output luminance that we generate, after matching SDR TV output, as
explained above).&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&#34;https://www.desmos.com/calculator/qbyomhxua3&#34;&gt;&lt;img src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/pq_curve_fit.png&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;h4&gt;Log-Log Plot of PQ OETF Approximation (&lt;a href=&#34;https://www.desmos.com/calculator/qbyomhxua3&#34;&gt;Desmos version&lt;/a&gt;)&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Fast PQ encoding. Input is assumed to be positive and scaled such that 1.0 corresponds to 100 nits. Accurate over range &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  0.01 - 1400 nits (and reasonable behavior outside of that range). &lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;RgbPqFromLinearFast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;533095.76&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;47438306.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;29063622.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;575216.76&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;383.09104&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.000487781&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;66391357.4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;81884528.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4182885.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10668.404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also fit a curve to the sRGB-to-linear conversion, which was useful in cases where we needed to filter linear values
(but could not use the hardware sRGB-to-linear conversion because of its limited precision). Again the results were
visually indistinguishable (but beware of error accumulation from repeated use).&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&#34;https://www.desmos.com/calculator/aqixhefatb&#34;&gt;&lt;img src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/srgb_curve_fit.png&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;h4&gt;Log-Log Plot of sRGB to Linear Approximation (&lt;a href=&#34;https://www.desmos.com/calculator/aqixhefatb&#34;&gt;Desmos version&lt;/a&gt;)&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Fast(er) approximate sRGB-to-linear conversion. Accurate over range 0-2.7 (0-10 linear).&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;RgbLinearFromSrgbFast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;5.873392&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2533932&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.07841727&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1470415&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.2869875&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.3594828&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;pq-upscaling&#34;&gt;PQ Upscaling&lt;/h1&gt;

&lt;p&gt;On the PS4 Pro, we render to a resolution of 3200x1800, which is then upscaled to 4K (3840x2160) for output to the TV.
Since the PQ OETF is highly non-linear, upscaling a PQ-encoded buffer introduces filtering artifacts (e.g., it tends to
significantly reduce the luminance of small bright features). Because of this, we chose to do the upscaling in software,
using a compute shader and LDS memory to amortize the conversion of samples.&lt;/p&gt;

&lt;h1 id=&#34;in-closing&#34;&gt;In Closing&amp;hellip;&lt;/h1&gt;

&lt;p&gt;I hope you&amp;rsquo;ve found these posts useful &amp;mdash; please don&amp;rsquo;t hesitate to leave comments or questions below!&lt;/p&gt;

&lt;h1 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Part 1 of this series: &lt;a href=&#34;http://www.glowybits.com/blog/2016/12/21/ifl_iss_hdr_1/&#34;&gt;HDR Display Support in Infamous Second Son and Infamous First Light (Part 1)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Rec._709&#34;&gt;Wikipedia page on Rec. 709&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itu.int/dms_pubrec/itu-r/rec/bt/R-REC-BT.709-6-201506-I!!PDF-E.pdf&#34;&gt;Official Rec. 709 Standard&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Scott Miller (Dolby Laboratories), &lt;a href=&#34;https://www.smpte.org/sites/default/files/2014-05-06-EOTF-Miller-1-2-handout.pdf&#34;&gt;A Perceptual EOTF for Extended Dynamic Range Imagery&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>HDR Display Support in Infamous Second Son and Infamous First Light (Part 1)</title>
      <link>http://www.glowybits.com/blog/2016/12/21/ifl_iss_hdr_1/</link>
      <pubDate>Wed, 21 Dec 2016 23:07:41 -0800</pubDate>
      
      <guid>http://www.glowybits.com/blog/2016/12/21/ifl_iss_hdr_1/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Last month, &lt;a href=&#34;https://www.suckerpunch.com/&#34;&gt;Sucker Punch&lt;/a&gt; released patches for both Infamous Second Son and First Light that added HDR and 4K
display support. This two-post series will focus on some of the technical aspects of adding HDR support to these games;
I&amp;rsquo;ll save a discussion of 4K support for a (possible) separate post. (For a more consumer-oriented description of the
features we added with these patches, please see Jason Connell&amp;rsquo;s &lt;a href=&#34;http://blog.us.playstation.com/2016/11/04/infamous-second-son-first-light-showcase-power-of-ps4-pro/&#34;&gt;post&lt;/a&gt; on the PlayStation Blog).&lt;/p&gt;

&lt;p&gt;When we started working with HDR displays back in early 2016, we weren&amp;rsquo;t sure what to expect. Some of us had seen
impressive HDR demos on show floors, but experience has taught us that reality doesn&amp;rsquo;t always live up to the hype.
Fortunately, HDR did not dissapoint.&lt;/p&gt;

&lt;p&gt;It turned out that both PS4 Infamous games were ideally suited for HDR displays. Both games were authored and rendered
with physically-based HDR lighting pipelines; only at the very end of the frame did we tonemap and color grade to SDR.
Our adherence to physically-based lighting principles meant that we didn&amp;rsquo;t use any lighting &amp;ldquo;hacks&amp;rdquo; that broke down when
we switched to HDR display output; as a result, we didn&amp;rsquo;t have to re-author any content for HDR; everything just worked,
and looked better. Our heroes&amp;rsquo; superpowers looked especially good when displayed on a good HDR TV; color and details were
visible that previously washed out to white.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll discuss our HDR tonemapping and color grading solutions, and the HDR-friendly render target format we
used to help improve performance.&lt;/p&gt;

&lt;h1 id=&#34;tonemapping&#34;&gt;Tonemapping&lt;/h1&gt;

&lt;p&gt;At Sucker Punch, we&amp;rsquo;ve switched to (approximate) &lt;a href=&#34;https://github.com/ampas/aces-dev/&#34;&gt;ACES&lt;/a&gt; filmic tonemapping (inspired by Krzysztof
Narkowicz&amp;rsquo;s &lt;a href=&#34;https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/&#34;&gt;post&lt;/a&gt;), and we&amp;rsquo;ve been very happy with the results. Since ACES also has an HDR output device
transform (ODT), it made sense to try it. (Krzysztof also did the same thing in parallel, which he&amp;rsquo;s written
about &lt;a href=&#34;https://knarkowicz.wordpress.com/2016/08/31/hdr-display-first-steps/&#34;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;We inititally ported the entire ACES RRT+ODT pipeline to PSSL (the PS4&amp;rsquo;s shader language), to validate our
approximations. The ACES transforms are written in a language not too dissimilar from shader code, so this conversion
was straightforward.&lt;/p&gt;

&lt;p&gt;We fit curves to the grayscale output of the ACES reference rendering transform (RRT) + output device transform (ODT)
for both SDR and HDR displays. Like Krzysztof, we scaled the input to the function to be more consistent with our old
tonemapper. Since we feed the output of our tonemapper to a 3D color LUT (in sRGB space), we converted the output of the
ACES transform to (unclamped) sRGB and included that in the curve fit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Convert a linear RGB color to an unclamped sRGB-encoded color after applying approximate &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  ACES HDR tonemapping (with input scaled by 2.05). Input is assumed to be non-negative. &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  Output is scaled so that 1.0 corresponds 100 nits; the maximum output is ~2.7 (the sRGB &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  encoding of 10.0 = 1000 nits).&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;RgbAcesHdrSrgb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2708.7142&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6801.1525&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1079.5474&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.1614649&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.00004139375&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;983.38937&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4132.0662&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2881.6522&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;128.35911&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Convert a linear RGB color to an sRGB-encoded color after applying approximate ACES SDR &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  tonemapping (with input scaled by 2.05). Input is assumed to be non-negative.&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;RgbAcesSdrSrgb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;saturate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;8.4680&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.002957&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0001004&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0000001274&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;8.3604&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.8227&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2189&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.002117&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.00003673&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;figure class=&#34;fr&#34;&gt;
    &lt;a href=&#34;http://www.glowybits.com/images/ifl_iss_hdr/aces_hdr_log_log.png&#34;&gt;
        &lt;img src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/aces_hdr_log_log.png&#34; /&gt;
    &lt;/a&gt;
    
    &lt;figcaption&gt;
        &lt;h4&gt;Log-Log Plot of ACES HDR Approximation&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure class=&#34;fr&#34;&gt;
    &lt;a href=&#34;http://www.glowybits.com/images/ifl_iss_hdr/aces_hdr_logx.png&#34;&gt;
        &lt;img src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/aces_hdr_logx.png&#34; /&gt;
    &lt;/a&gt;
    
    &lt;figcaption&gt;
        &lt;h4&gt;Log-Linear (sRGB) Plot of ACES HDR Approximation&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;These approximations are an excellent match for grayscale values; the main difference is in red tones, which the ACES
RRT explicitly modifies. The ACES code also desaturates bright colors more quickly than we do. It should be possible to
achieve a better match by combining this curve with 3D LUT color grading, although this isn&amp;rsquo;t something we&amp;rsquo;ve tried.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve included some A/B comparisons between full ACES and the per-channel approximation below. (Please note that these
screenshots were taken in SDR mode with color grading disabled.)&lt;/p&gt;

&lt;p&gt;Since we were so happy with how the ACES HDR tonemapping curve looked, we decided to switch to ACES for SDR mode too.
This made the two modes more consistent in their overall look, and we felt that it gave the colors in SDR mode a nice
added kick.&lt;/p&gt;

&lt;div class=&#34;clearfix&#34;&gt;&lt;/div&gt;

&lt;figure&gt;
&lt;img onclick=&#34;ImageFlip(this, &#39;/images/ifl_iss_hdr/iflredcar_approx.jpg&#39;)&#34; src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/iflredcar_aces.jpg&#34;&gt;
&lt;figcaption&gt;

&lt;h4&gt;An example of a scene where the difference between the full ACES implementation and our approximation is relatively significant, because of the predominance of red tones.&lt;br&gt;(Click the image to flip.)&lt;/h4&gt; 

&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img onclick=&#34;ImageFlip(this, &#39;/images/ifl_iss_hdr/iflpanda_approx.jpg&#39;)&#34; src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/iflpanda_aces.jpg&#34;&gt;
&lt;figcaption&gt;
&lt;h4&gt;The difference is much more subtle in this scene.&lt;br&gt;(Click the image to flip.)&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;color-grading&#34;&gt;Color Grading&lt;/h1&gt;

&lt;p&gt;As mentioned above, we used a 3D color LUT for color grading in both games. These were authored for SDR TVs, so they
assume an input range of [0, 1]. Since time and resources were limited, we didn&amp;rsquo;t want to have to re-author these LUTs
to accomodate HDR output, nor did we want to switch to a different color grading technique for HDR mode.&lt;/p&gt;

&lt;p&gt;We opted for a simple solution: we remapped the HDR tonemapped output to approximately match the SDR tonemapped output.
After color grading, we expand the range back to HDR using the inverse scale. The end result is close enough to the SDR
output, qualitatively, that we didn&amp;rsquo;t feel the need to make any other additional changes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Smoothly clamp x to 1.0&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ColorGradeSmoothClamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.525&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    
    &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;saturate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Approximate SDR color grading with an HDR image&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ColorGradeHdr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgbHdr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Find the maximum component&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gMax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rgbHdr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgbHdr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgbHdr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;gMax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gMax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1e-6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;// Clamp HDR to 0-1 range, and calculate scale for re-expansion&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gClamped&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ColorGradeSmoothClamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gMax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rScale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gClamped&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gMax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;// Perform standard SDR color grading&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;float3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgbGraded&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ColorGrade&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rgbHdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Re-expand to HDR&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgbGrade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure&gt;
&lt;a href=&#34;https://www.desmos.com/calculator/fhcl3p1mwp&#34;&gt;&lt;img src=&#34;http://www.glowybits.com/images/ifl_iss_hdr/hdr_remap.png&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;h4&gt;The sRGB-encoded ACES tonemapping curves along with the remapped HDR curve. (&lt;a href=&#34;https://www.desmos.com/calculator/fhcl3p1mwp&#34;&gt;Desmos version&lt;/a&gt;) &lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;render-target-formats&#34;&gt;Render Target Formats&lt;/h1&gt;

&lt;p&gt;With HDR displays, RGBA8 buffers simply do not have enough precision to represent the desired output range without
introducing additional banding artifacts. The PS4 requires the back buffer to be &lt;a href=&#34;https://en.wikipedia.org/wiki/Perceptual_Quantizer&#34;&gt;PQ&lt;/a&gt; encoded (part of the &lt;a href=&#34;https://en.wikipedia.org/wiki/HDR10&#34;&gt;HDR10&lt;/a&gt;
standard) in an RGB10A2 buffer, but that doesn&amp;rsquo;t mean that we need to use this encoding for all of our post-tonemap
rendering. Also, the color space of the back buffer must be &lt;a href=&#34;https://en.wikipedia.org/wiki/Rec._2020&#34;&gt;Rec. 2020&lt;/a&gt; (instead of &lt;a href=&#34;https://en.wikipedia.org/wiki/Rec._709&#34;&gt;Rec. 709&lt;/a&gt; for
SDR), but since none of the assets were authored for this color space, we can delay the conversion as long as we
wish.&lt;/p&gt;

&lt;p&gt;In both games, the 2D UI is rendered with alpha blending in sRGB (&amp;ldquo;gamma&amp;rdquo;) space. Rendering to a PQ buffer would require
us to do &amp;ldquo;software&amp;rdquo; blending, which would be expensive since we would need to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert from PQ to linear&lt;/li&gt;
&lt;li&gt;Convert from Rec. 2020 to Rec. 709&lt;/li&gt;
&lt;li&gt;Convert from linear to sRGB&lt;/li&gt;
&lt;li&gt;Blend&lt;/li&gt;
&lt;li&gt;Perform the inverse of steps 3 to 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A better option is to render UI to a separate buffer (in sRGB 709 space), and composite as a final step. We chose a
third way which avoids the use of a separate buffer. Instead of tonemapping to PQ 2020, we encode to a format we call
sRGB10, which is valid over the domain of 0-10 linear (about 0-2.7 sRGB) &amp;mdash; recall that 1.0 corresponds to the SDR peak
luminance of 100 nits, while 10.0 (linear) corresponds to 1000 nits, the peak output luminance of our HDR tonemapping
function.&lt;/p&gt;

&lt;p&gt;The sRGB10 encoding function is given by:&lt;/p&gt;

&lt;div&gt;$$f_\mathrm{srgb10}\left(x_\mathrm{linear}\right) = \frac{f_\mathrm{srgb}\left(x_\mathrm{linear}\right)}{f_\mathrm{srgb}\left(10\right)}$$&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;$f_{srgb}$&lt;/code&gt; is the sRGB encoding function. We can then render UI directly into this buffer with alpha blending,
and the output will be identical to SDR mode, as long as we scale the UI shader output by &lt;code&gt;$1 / f_\mathrm{srgb}\left(10\right)$&lt;/code&gt;.
Because of the sRGB10 gamma encoding, very bright objects in our games do not overwhelm the UI elements blended on top of them.&lt;/p&gt;

&lt;p&gt;This format retains more than 8 bits of precision for the SDR portion of the curve &lt;span
class=&#34;nobr&#34;&gt;($0 \le x_\mathrm{linear} \le 1$)&lt;/span&gt;. Unfortunately, it&amp;rsquo;s not possible to use hardware sRGB encoding and decoding,
since the sRGB and sRGB10 curves don&amp;rsquo;t match. (Even if they did, on the PS4&amp;rsquo;s GCN hardware, the sRGB conversion only
preserves 8 bits of precision, making it inappropriate for use with HDR signals.)&lt;/p&gt;

&lt;p&gt;Switching to this format (from RGBA16F) was the single most effective HDR performance optimization,
since it significantly reduced the bandwidth requirements of our antialiasing and 4K upscaling passes.&lt;/p&gt;

&lt;p&gt;(I wasn&amp;rsquo;t aware of it until writing this post, but NVIDIA describes a similar approach &lt;a href=&#34;https://developer.nvidia.com/displaying-hdr-nuts-and-bolts&#34;&gt;here&lt;/a&gt;, though that approach
uses a floating-point buffer instead of a fixed-point buffer, and is scaled slightly differently.)&lt;/p&gt;

&lt;h1 id=&#34;stay-tuned&#34;&gt;Stay Tuned!&lt;/h1&gt;

&lt;p&gt;In Part 2 of this series I&amp;rsquo;ll discuss a couple more performance optimizations we made, how we
matched the look of the SDR and HDR modes (in the darker parts of the image), as well as some issues we ran into when
combining HDR and 4K on the PS4 Pro.&lt;/p&gt;

&lt;h1 id=&#34;references-and-further-reading&#34;&gt;References and Further Reading&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Krzysztof Narkowicz, &lt;a href=&#34;https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/&#34;&gt;ACES Filmic Tone Mapping Curve&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Krzysztof Narkowicz, &lt;a href=&#34;https://knarkowicz.wordpress.com/2016/08/31/hdr-display-first-steps/&#34;&gt;HDR Display – First Steps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Evan Hart (NVIDIA), &lt;a href=&#34;https://developer.nvidia.com/displaying-hdr-nuts-and-bolts&#34;&gt;Displaying HDR Nuts and Bolts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jeroen Soethoudt (Nixxes), Jurjen Katsman (Nixxes), and Holger Gruen (NVIDIA), &lt;a href=&#34;https://developer.nvidia.com/implementing-hdr-rise-tomb-raider&#34;&gt;Implementing HDR in &amp;lsquo;Rise of the Tomb Raider&amp;rsquo;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Scott Miller (Dolby Laboratories), &lt;a href=&#34;https://www.smpte.org/sites/default/files/2014-05-06-EOTF-Miller-1-2-handout.pdf&#34;&gt;A Perceptual EOTF for Extended Dynamic Range Imagery&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>